generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model User {
    id                   String    @id @default(nanoid())
    phoneNumber          String    @unique
    email                String?
    emailVerified        DateTime?
    fullName             String
    birthDate            DateTime?
    credential           String // used for signin
    gender               Gender
    role                 Role      @default(VISITOR)
    isActive             Boolean   @default(true)
    totalSpendingPackage Int       @default(0)
    totalSpendingProduct Int       @default(0)
    totalSpending        Int       @default(0)

    // relations
    packageTransactions PackageTransaction[]
    productTransactions ProductTransaction[]
    visits              Visit[]              @relation("userVisits")
    activeVisit         Visit?               @relation(fields: [activeVisitId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    activeVisitId       String?
    tokens              Token[]
    image               File?                @relation("userImage", fields: [imageId], references: [id])
    imageId             String?
    files               File[]
    trainerSchedules    Schedule[]           @relation("trainerSchedules")

    // m-m
    schedules       VisitorSchedule[]
    trainerSports   TrainerSport[]
    trainerPackages PackageTrainer[]

    createdDate DateTime @default(now())

    @@index(fields: [fullName(sort: Asc)])
    @@index([imageId])
    @@index([activeVisitId])
}

model File {
    id   String @id @default(nanoid())
    url  String
    name String

    // relations
    imageOwner User[]  @relation("userImage")
    owner      User?   @relation(fields: [ownerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    ownerId    String?

    createdDate DateTime @default(now())

    @@index([ownerId])
}

model PromoCode {
    id            String  @id @default(nanoid())
    code          String  @unique
    discountPrice Int
    isActive      Boolean @default(true)

    // relations
    packagePruchases PackageTransaction[]
    type             PromoCodeType

    createdDate DateTime @default(now())
}

model Package {
    id               String  @id @default(nanoid())
    name             String
    description      String?
    price            Int
    validityInDays   Int?
    approvedSessions Int?
    isActive         Boolean @default(true)

    // relations
    type         PackageType
    transactions PackageTransaction[]
    visits       Visit[]
    schedules    Schedule[]

    // m-m
    places   PackagePlace[]
    trainers PackageTrainer[]
    sports   PackageSport[]

    createdDate DateTime @default(now())

    @@index(fields: [price])
}

model Schedule {
    id          String    @id @default(nanoid())
    description String
    startDate   DateTime  @default(now())
    endDate     DateTime?
    isConfirmed Boolean   @default(false)

    // relations
    package   Package @relation(fields: [packageId], references: [id])
    packageId String
    trainer   User    @relation("trainerSchedules", fields: [trainerId], references: [id])
    trainerId String

    createdDate DateTime @default(now())

    // m-m
    visitors VisitorSchedule[]

    @@index(fields: [startDate(sort: Desc)])
    @@index([packageId])
    @@index([trainerId])
}

model Visit {
    id          String    @id @default(nanoid())
    startDate   DateTime  @default(now())
    endDate     DateTime?
    isConfirmed Boolean   @default(false)

    // relations
    activeVisitVisitor User[]
    visitor            User    @relation("userVisits", fields: [visitorId], references: [id])
    visitorId          String
    package            Package @relation(fields: [packageId], references: [id])
    packageId          String

    createdDate DateTime @default(now())

    @@index(fields: [startDate(sort: Desc)])
    @@index([visitorId])
    @@index([packageId])
}

model Product {
    id    String @id @default(nanoid())
    name  String
    price Int

    // relations
    transactions ProductTransaction[]

    createdDate DateTime @default(now())

    @@index(fields: [name])
}

model Place {
    id      String @id @default(nanoid())
    name    String
    address String
    url     String

    // relations
    packages PackagePlace[]

    createdDate DateTime @default(now())
}

model ProductTransaction {
    id              String   @id @default(nanoid())
    quantity        Int
    unitPrice       Int
    totalPrice      Int
    transactionDate DateTime @default(now())

    // relations
    paymentMethod   PaymentMethod @relation(fields: [paymentMethodId], references: [id])
    paymentMethodId String
    product         Product       @relation(fields: [productId], references: [id]) // bisa banyak produk
    productId       String
    buyer           User          @relation(fields: [buyerId], references: [id])
    buyerId         String

    createdDate DateTime @default(now())

    @@index(fields: [transactionDate(sort: Desc)])
    @@index([paymentMethodId])
    @@index([productId])
    @@index([buyerId])
}

model PackageTransaction {
    id                String    @id @default(nanoid())
    totalPrice        Int
    startDate         DateTime? @default(now())
    expiryDate        DateTime?
    remainingSessions Int?
    transactionDate   DateTime  @default(now())

    // relations
    paymentMethod   PaymentMethod @relation(fields: [paymentMethodId], references: [id])
    paymentMethodId String
    package         Package       @relation(fields: [packageId], references: [id])
    packageId       String
    buyer           User          @relation(fields: [buyerId], references: [id])
    buyerId         String
    promoCode       PromoCode?    @relation(fields: [promoCodeId], references: [id])
    promoCodeId     String?

    createdDate DateTime @default(now())

    @@index(fields: [transactionDate(sort: Desc)])
    @@index([paymentMethodId])
    @@index([packageId])
    @@index([buyerId])
    @@index([promoCodeId])
}

model PaymentMethod {
    id   String @id @default(nanoid())
    name String

    // relations
    productTransactions ProductTransaction[]
    packageTransactions PackageTransaction[]

    createdDate DateTime @default(now())
}

model Token {
    id         String   @id @default(nanoid())
    token      String   @unique
    expiryDate DateTime

    // relations
    user   User      @relation(fields: [userId], references: [id])
    userId String
    type   TokenType

    createdDate DateTime @default(now())

    @@index([userId])
}

model Sport {
    id   String @id @default(nanoid())
    name String

    // m-m
    trainers TrainerSport[]
    packages PackageSport[]

    createdDate DateTime @default(now())
}

enum PackageType {
    MEMBER
    VISIT
    SESSIONS
}

enum Gender {
    MALE
    FEMALE
}

enum Role {
    OWNER
    ADMIN
    VISITOR
    TRAINER
}

enum TokenType {
    VERIFY_EMAIL
    FORGOT_PASSWORD
}

enum PromoCodeType {
    REGULAR
    STUDENT
}

// many to many
model VisitorSchedule {
    visitor     User     @relation(fields: [visitorId], references: [id])
    visitorId   String
    schedule    Schedule @relation(fields: [scheduleId], references: [id])
    scheduleId  String
    createdDate DateTime @default(now())

    @@id([visitorId, scheduleId])
    @@index([visitorId])
    @@index([scheduleId])
}

model TrainerSport {
    trainer     User     @relation(fields: [trainerId], references: [id])
    trainerId   String
    sport       Sport    @relation(fields: [sportId], references: [id])
    sportId     String
    createdDate DateTime @default(now())

    @@id([trainerId, sportId])
    @@index([trainerId])
    @@index([sportId])
}

model PackageTrainer {
    trainer     User     @relation(fields: [trainerId], references: [id])
    trainerId   String
    package     Package  @relation(fields: [packageId], references: [id])
    packageId   String
    createdDate DateTime @default(now())

    @@id([trainerId, packageId])
    @@index([trainerId])
    @@index([packageId])
}

model PackagePlace {
    package     Package  @relation(fields: [packageId], references: [id])
    packageId   String
    place       Place    @relation(fields: [placeId], references: [id])
    placeId     String
    createdDate DateTime @default(now())

    @@id([packageId, placeId])
    @@index([packageId])
    @@index([placeId])
}

model PackageSport {
    package     Package  @relation(fields: [packageId], references: [id])
    packageId   String
    sport       Sport    @relation(fields: [sportId], references: [id])
    sportId     String
    createdDate DateTime @default(now())

    @@id([packageId, sportId])
    @@index([packageId])
    @@index([sportId])
}
